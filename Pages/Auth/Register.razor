@inject IJSRuntime js
@inject NavigationManager _navman
@page "/register"

<PageTitle>LCP Maui - Register</PageTitle>

<h3>Register</h3>

<EditForm Model="@users" OnValidSubmit="onValidSubmit" OnInvalidSubmit="onInvalidSubmit">
    <ValidationSummary />
    <DataAnnotationsValidator />

    <div class="form-group mt-3">
        <label for="username" class="usernamelbl d-block">Username:</label>
        <InputText type="text" class="form-control mt-3" @bind-Value="users.Username" />
    </div>

    <div class="form-group mt-3">
        <label for="email" class="emaillbl d-block">Email:</label>
        <InputText type="email" class="form-control mt-3" @bind-Value="users.Email" />
    </div>

    <div class="form-group mt-3">
        <label for="password" class="passwordlbl d-block">Password:</label>
        <InputText type="password" class="form-control mt-3" @bind-Value="users.Password" />
    </div>

    <div class="form-group mt-3 d-inline-block">
        <input type="reset" class="btn btn-secondary btnclear" value="Clear" />
        <input type="submit" class="btn btn-primary btnsubmit" value="Create" />
    </div>
</EditForm>

@code {
    [Inject] public IMyServices MyServices { get; set; }

    private Classes.Users users = new Classes.Users();

    private async Task onValidSubmit()
    {
        await js.InvokeVoidAsync("alert", "Valid data!");
        await MyServices.Create<Classes.Users>("register", users);
        _navman.NavigateTo("/", true);
    }

    private async Task onInvalidSubmit()
    {
        await js.InvokeVoidAsync("alert", "Invalid data!");
    }
}
