@page "/login"

<PageTitle>LCP Maui - Login</PageTitle>

<h3>Login</h3>

@if (mysession == null)
{
    <EditForm Model="@usersath" OnValidSubmit="@onValidSubmit" OnInvalidSubmit="@onInvalidSubmit">
        <ValidationSummary />
        <DataAnnotationsValidator />

        <div class="form-group mt-3">
            <label for="username" class="usernamelbl d-block">Username:</label>
            <InputText type="text" class="form-control username mt-3" id="username" @bind-Value="usersath.Username" />
        </div>

        <div class="form-group mt-3">
            <label for="password" class="passwordlbl d-block">Password:</label>
            <InputText type="password" class="form-control password mt-3" id="password" @bind-Value="usersath.Password" />
        </div>

        <div class="form-group mt-3 mb-3 d-inline-block">
            <input type="reset" class="btn btn-secondary btnclear" value="Clear" />
            <input type="submit" class="btn btn-primary btnsubmit" value="Enter" />
        </div>
    </EditForm>
}
else
{
    <div class="container">
        <div class="row justify-content-center text-center">
            <div class="col-12 text-center">
                <i class="bi bi-exclamation-triangle-fill" style="font-size: 4rem; color: red;"></i>
                <h1 class="mt-3">You are already logged in!</h1>
                <a href="/" class="btn btn-primary mt-3">Back</a>
            </div>
        </div>
    </div>
}

@code {
    [Inject] public IMyServices MyServices { get; set; }

    private Classes.UsersAuth usersath = new Classes.UsersAuth();
    private Classes.UsersAuth mysession = new Classes.UsersAuth();

    protected override async Task OnInitializedAsync()
    {
        mysession = await localStorage.GetItemAsync<Classes.UsersAuth>("usersession");
    }

    private async Task<Classes.Users> getList()
    {
        return (await MyServices.Get<Classes.Users>("users")).ToList().FirstOrDefault(x => x.Username == usersath.Username);
    }

    private async Task onValidSubmit()
    {
        usersath.UsersAuthId = (await getList()).UsersId;
        usersath.Role = string.IsNullOrEmpty(usersath.Role) ? (await getList()).Role : usersath.Role;
        usersath.Email = string.IsNullOrEmpty(usersath.Email) ? (await getList()).Email : usersath.Email;
        await js.InvokeVoidAsync("alert", "Valid data! " + JsonConvert.SerializeObject(usersath));
        await MyServices.Create<Classes.UsersAuth>("users/login", usersath);
        await localStorage.SetItemAsync<Classes.UsersAuth>("usersession", usersath);
        _navman.NavigateTo("/", true);
    }

    private async Task onInvalidSubmit()
    {
        await js.InvokeVoidAsync("alert", "Invalid data!");
    }
}
