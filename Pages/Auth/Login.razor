@page "/login"

<PageTitle>LCP Maui - Login</PageTitle>

<h3>Login</h3>

@if (mysession == null)
{
    <EditForm Model="@usersath" OnValidSubmit="@onValidSubmit" OnInvalidSubmit="@onInvalidSubmit">
        <ValidationSummary />
        <DataAnnotationsValidator />

        <div class="form-group mt-3">
            <label for="username" class="usernamelbl d-block">Username:</label>
            <InputText type="text" class="form-control username mt-3" id="username" @bind-Value="usersath.Username" />
        </div>

        <div class="form-group mt-3">
            <label for="password" class="passwordlbl d-block">Password:</label>
            <InputText type="password" class="form-control password mt-3" id="password" @bind-Value="usersath.Password" />
        </div>

        <div class="form-group mt-3 mb-3 d-inline-block">
            <input type="reset" class="btn btn-secondary btnclear" value="Clear" />
            <input type="submit" class="btn btn-primary btnsubmit" value="Enter" />
        </div>
    </EditForm>
    <hr />
    <div class="qsignup" id="qsignup">
        <h3 class="title">Quick sign up / login</h3>
        <p class="msg">
            Don't wanna create new account manually?
            Fine. There's a quick sign up and login to access instantly to my app.
        </p>
        <p class="msg">
            <b>Warning:</b> 
            This feature is currently work in progress, please wait it until to this feature to be developed or use login / signup manually!
        </p>
        <div class="blkbtnsocials" id="blkbtnsocials">
            <button class="btn btn-primary btnsignsocials btnloggoogle" id="btnloggoogle" onclick="@(() => doQuickLogin("google"))">
                <i class="bi bi-google"></i>
                Google
            </button>
            <button class="btn btn-primary btnsignsocials btnloggithub" id="btnloggithub" onclick="@(() => doQuickLogin("github"))">
                <i class="bi bi-github"></i>
                Github
            </button>
            <button class="btn btn-primary btnsignsocials btnloglinkedin" id="btnloglinkedin" onclick="@(() => doQuickLogin("linkedin"))">
                <i class="bi bi-linkedin"></i>
                Linkedin
            </button>
            <button class="btn btn-primary btnsignsocials btnlogtwitch" id="btnlogtwitch" onclick="@(() => doQuickLogin("twitch"))">
                <i class="bi bi-twitch"></i>
                Twitch
            </button>
            <button class="btn btn-primary btnsignsocials btnlogfacebook" id="btnlogfacebook" onclick="@(() => doQuickLogin("facebook"))">
                <i class="bi bi-facebook"></i>
                Facebook
            </button>
            <button class="btn btn-primary btnsignsocials btnlogtwitter" id="btnlogtwitter" onclick="@(() => doQuickLogin("twitter"))">
                <i class="bi bi-twitter"></i>
                Twitter
            </button>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row justify-content-center text-center">
            <div class="col-12 text-center">
                <i class="bi bi-exclamation-triangle-fill" style="font-size: 4rem; color: red;"></i>
                <h1 class="mt-3">You are already logged in!</h1>
                <a href="/" class="btn btn-primary mt-3">Back</a>
            </div>
        </div>
    </div>
}

@code {
    [Inject] public IMyServices MyServices { get; set; }

    private Classes.UsersAuth usersath = new Classes.UsersAuth();
    private Classes.UsersAuth mysession = new Classes.UsersAuth();

    protected override async Task OnInitializedAsync()
    {
        mysession = await localStorage.GetItemAsync<Classes.UsersAuth>("usersession");
    }

    private async Task<Classes.Users> getList()
    {
        return (await MyServices.Get<Classes.Users>("users")).ToList().FirstOrDefault(x => x.Username == usersath.Username);
    }

    private async Task onValidSubmit()
    {
        usersath.UsersAuthId = (await getList()).UsersId;
        usersath.Role = string.IsNullOrEmpty(usersath.Role) ? (await getList()).Role : usersath.Role;
        usersath.Email = string.IsNullOrEmpty(usersath.Email) ? (await getList()).Email : usersath.Email;
        usersath.Pin = string.IsNullOrEmpty(usersath.Pin) ? (await getList()).Pin : usersath.Pin;
        await js.InvokeVoidAsync("alert", "Logged successfully as " + usersath.Username);
        await MyServices.Create<Classes.UsersAuth>("users/login", usersath);
        await localStorage.SetItemAsync<Classes.UsersAuth>("usersession", usersath);
        _navman.NavigateTo("/", true);
    }

    private async Task onInvalidSubmit()
    {
        await js.InvokeVoidAsync("alert", "Invalid data!");
    }

    private async Task doQuickLogin(string authService = "google")
    {
        await js.InvokeVoidAsync("alert", "WARNING: This feature is currently work in progress, please wait it until to this feature to be developed or use login / signup manually!");

        switch (authService.ToLower())
        {
            case "google":
                await js.InvokeVoidAsync("alert", "Google");
                _navman.NavigateTo("https://localhost:7285/Identity/Account/Login", true);
                break;
            case "github":
                await js.InvokeVoidAsync("alert", "Github");
                _navman.NavigateTo("https://localhost:7285/Identity/Account/Login", true);
                break;
            case "facebook":
                await js.InvokeVoidAsync("alert", "Facebook (Meta)");
                _navman.NavigateTo("https://localhost:7285/Identity/Account/Login", true);
                break;
            case "twitter":
                await js.InvokeVoidAsync("alert", "Twitter");
                _navman.NavigateTo("https://localhost:7285/Identity/Account/Login", true);
                break;
            case "linkedin":
                await js.InvokeVoidAsync("alert", "Linkedin");
                _navman.NavigateTo("https://localhost:7285/Identity/Account/Login", true);
                break;
            case "twitch":
                await js.InvokeVoidAsync("alert", "Twitch");
                _navman.NavigateTo("https://localhost:7285/Identity/Account/Login", true);
                break;
            default:
                await js.InvokeVoidAsync("alert", "Not supported this auth service!");
                break;
        }
    }
}
