@page "/feedback"
@page "/feedback/{Id:int}"

<PageTitle>LCP Maui - Feedback</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-12">
            <h3>Feedback</h3>
            
            <EditForm Model="feedback" OnValidSubmit="onValidSubmit" OnInvalidSubmit="onInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mt-3">
                    <label>Title</label>
                    <InputText id="title" class="title form-control" @bind-Value="feedback.Title" />
                </div>

                <div class="form-group mt-3">
                    <label>Description</label>
                    <InputTextArea id="description" class="description form-control text-justify" cols="1" rows="5" @bind-Value="feedback.Description" />
                </div>

                <div class="form-group mt-3 d-inline-block">
                    @if (mysession != null)
                    {
                        <div class="senderblk d-inline-block">
                            <label>Sending as</label>
                        
                            <input type="text" class="form-control" value="@mysession.Username" style="cursor: not-allowed; background: gray; color: white;" readonly />
                            <InputNumber id="usersId" class="usersId hidden form-control" @bind-Value="mysession.UsersAuthId" />
                        </div>
                    }

                    <div class="statusblk d-inline-block @(mysession != null ? "ms-3" : "")">
                        <label>Status</label>
                        <InputSelect class="status form-control d-inline-block" id="status" @bind-Value="feedback.Status">
                            @foreach (var status in Enum.GetValues(typeof(StatusType)))
                            {
                                <option value="@status">@status</option>
                            }
                        </InputSelect>
                    </div>
                    
                    <button type="button" class="btn btn-secondary btnclear" onclick="@(() => Clear())">Clear</button>
                    <button type="submit" class="btn btn-primary btnsend">Send</button>
                </div>
            </EditForm>

            @if(feedbacklist != null)
            {
                @if(Id > 0)
                {
                    @foreach (var fbl in feedbacklist)
                    {
                        if(Id == fbl.UsersId)
                        {
                            <div class="feedbacklist d-block mt-3 col-12">
                                <div class="col-6">
                                    <i class="bi bi-chevron-up" style="font-size: 2rem; cursor: pointer;" onclick="@(() => onUpvote())"></i>
                                    <span class="counter @(fbl.Upvotes > 0 ? "upvoted" : (fbl.Downvotes > 0 ? "downvoted" : ""))">
                                        @(fbl.Upvotes > 0 ? fbl.Upvotes : fbl.Downvotes)
                                    </span>
                                    <i class="bi bi-chevron-down" style="font-size: 2rem; cursor: pointer;" onclick="@(() => onDownvote())"></i>
                                </div>
                                <div class="col-6">
                                    <h1 class="title">@fbl.Title</h1>
                                    <p class="barinfo mt-3">UserId: @fbl.UsersId | Date Start: @fbl.DateStart | Date End: @fbl.DateEnd</p>
                                    <p class="text text-justify mt-3">@fbl.Description</p>
                                </div>
                            </div>
                        }
                    }
                } 
                else
                {
                    @foreach (var fbl in feedbacklist)
                    {
                        <div class="feedbacklist d-block mt-3 col-12">
                            <div class="col-6">
                                <i class="bi bi-chevron-up" style="font-size: 2rem; cursor: pointer;" onclick="@(() => onUpvote())"></i>
                                <span class="counter @(fbl.Upvotes > 0 ? "upvoted" : (fbl.Downvotes > 0 ? "downvoted" : ""))">
                                    @(fbl.Upvotes > 0 ? fbl.Upvotes : fbl.Downvotes)
                                </span>
                                <i class="bi bi-chevron-down" style="font-size: 2rem; cursor: pointer;" onclick="@(() => onDownvote())"></i>
                            </div>
                            <div class="col-6">
                                <h1 class="title">@fbl.Title</h1>
                                <p class="barinfo mt-3">UserId: @fbl.UsersId | Date Start: @fbl.DateStart | Date End: @fbl.DateEnd</p>
                                <p class="text text-justify mt-3">@fbl.Description</p>
                            </div>
                        </div>
                    }
                }
            }
            else
            {
                if (isLoading)
                {
                    <div class="col-12">
                        <h3>Loading feedback messages...</h3>
                    </div>
                }
                else
                {
                    <div class="col-12">
                        <h3>0 feedback messages!</h3>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Inject] public IMyServices MyServices { get; set; }
    [Parameter] public int Id { get; set; }

    private Classes.UsersAuth mysession = new Classes.UsersAuth();
    public Classes.Feedback feedback = new Classes.Feedback();
    public List<Classes.Feedback> feedbacklist = new List<Classes.Feedback>();

    private int upvoteCounter { get; set; } = 0;
    private int downvoteCounter { get; set; } = 0;
    private bool isLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            mysession = await localStorage.GetItemAsync<Classes.UsersAuth>("usersession");
            feedbacklist = (await MyServices.Get<Classes.Feedback>("feedbacks")).ToList();
            isLoading = false;
        }
        catch (Exception ex)
        {
            feedbacklist = null;
            await js.InvokeVoidAsync("console.log", "" + ex.Message);
            isLoading = false;
        }
    }

    private async Task onValidSubmit()
    {
        await MyServices.Create<Classes.Feedback>("feedbacks", feedback);
        await js.InvokeVoidAsync("alert", "Thank you for sending your feedback to me!");

        if(Id > 0)
        {
            _navman.NavigateTo("/feedback/"+Id, true);
        }
        else
        {
            _navman.NavigateTo("/feedback", true);
        }
    }

    private async Task onInvalidSubmit()
    {
        await js.InvokeVoidAsync("alert", "Error: Data is not valid to submit!");
    }

    private async Task onUpvote()
    {
        if(Id > 0)
        {
            upvoteCounter++;
            downvoteCounter = 0;
            feedback.Upvotes = upvoteCounter;
            feedback.Downvotes = downvoteCounter;
            await MyServices.UpdateById("feedbacks", Id, feedback);
            await js.InvokeVoidAsync("alert", $"You upvoted this feedback post (Id: {Id})!");
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Cannot upvote this feedback post because it doesnt exist!");
        }
    }

    private async Task onDownvote()
    {
        if(Id > 0)
        {
            downvoteCounter++;
            upvoteCounter = 0;
            feedback.Downvotes = downvoteCounter;
            feedback.Upvotes = upvoteCounter;
            await MyServices.UpdateById("feedbacks", Id, feedback);
            await js.InvokeVoidAsync("alert", $"You downvoted this feedback post (Id: {Id})!");
        } 
        else
        {
            await js.InvokeVoidAsync("alert", "Cannot downvote this feedback post because it doesnt exist!");
        }
    }

    private async Task Clear()
    {
        feedback = new Classes.Feedback();
        await js.InvokeVoidAsync("alert", "Cleared!");
    }
}
